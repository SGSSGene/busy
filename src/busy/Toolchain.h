#pragma once

#include <busyConfig/busyConfig.h>

namespace busy {

class Installation;

class Toolchain {
private:
	std::string name;
	bool        autoGenerated;

	std::vector<std::string> cCompiler;
	std::vector<std::string> cppCompiler;
	std::vector<std::string> archivist;
	std::vector<std::string> installations;

public:
	Toolchain()
		: autoGenerated { false } {
	}
	Toolchain(std::string _name, bool _autoGenerated, std::string _cCompiler, std::string _cppCompiler, std::string _archivist)
		: name          { _name }
		, autoGenerated { _autoGenerated }
		, cCompiler     { _cCompiler }
		, cppCompiler   { _cppCompiler }
		, archivist     { _archivist } {
	}
	Toolchain(busyConfig::Toolchain const& _toolchain);
	auto getName() const -> std::string const& {
		return name;
	}
	bool isAutoGenerated() const {
		return autoGenerated;
	}
	auto getCCompiler() const -> std::vector<std::string> const& {
		return cCompiler;
	}
	auto getCppCompiler() const -> std::vector<std::string> const& {
		return cppCompiler;
	}
	auto getArchivist() const -> std::vector<std::string> const& {
		return archivist;
	}
	auto getInstallations() const -> std::vector<std::string> const& {
		return installations;
	}
	bool isInstalled(std::map<std::string, Installation> const& installations) const;
	void install(std::map<std::string, Installation> const& installations) const;
};

}
