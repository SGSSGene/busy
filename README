== Use cases: ==

(a) // Checkout and build everything
$ aBuild git@github.com:DemoProject1.git # checksout and builds everything you need

(b) // Rebuild everything
$ cd DemoProjct1
$ aBuild <rebuild>

(c) // Update everything
$ cd DemoProject1
$ aBuild update

(d) // Test everything
$ cd DemoProject1
$ aBuild test

(e) // Create docu
$ cd DemoProject1
$ aBuild docu

== Progress ==
Progress:
(a) o
(b) o
(c) o
(d) o
(e) o


!!TODOs
– High Priority
	• "including" dep ext dependencies
		This would allow a flat package hierachy.
		So we could have meta packages which provide all types of utils,
		but we don't need to know each real package name.
		(using own namespace, so there can be meta packages)
– Low priority
	• fixing internal dependencies:
		– only need to make decision (1)
		– package need an name packed into the package json file.
		This way a package can dereference itself.
		(1) Decision to be made: do others have to use a name to? exact same name?
		

	• "aBuild install" should run "aBuild build" at the beginning
	• loop detection of projects
		dependencies of projects
	• adding auto generated defines like "ABUILD_ARMADILLO"
	• status (which also shows unpushed changes)
	• display dependency tree
	• use a git library
	• use CommonOption library (some decision about dynamic parameters have to be made)
	• use better library for file operations
	• parallel compiles
	• plugins for own file formats
	• using external sdk
	• fixing overuse of "system()"
